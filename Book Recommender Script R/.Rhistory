install.packages("tseries")
readBooks <- function() {
df_books <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_books.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_books)
}
#function that returns book Info
getBookInfo <- function(book_id){
df_books <- readBooks()
bookInfo <- df_books[which(df_books$book_id == book_id),c(2,3,7)]
return(bookInfo)
}
getRecommendation <- function(current_user){
#Import Library
library(recommenderlab)
library(tseries)
# convert current_user to character
#get sparse Rating matrix
ratingmat0 <- read.matrix(file = "processed_mat.csv",header = TRUE,sep = "",skip = 0)
print(is.data.frame(ratingmat0))
print(dim(ratingmat0))
sparse_ratings <- as(ratingmat0, "sparseMatrix")
rm(ratingmat0)
print(dim(sparse_ratings))
gc()
# already rated
#df_ratings <- readRatings()
#alreadyRead <- df_ratings[which(df_ratings$user_id == current_user),2]
real_ratings <- new("realRatingMatrix", data = sparse_ratings)
model <- Recommender(real_ratings, method = "UBCF", param = list(method = "pearson", nn = 4))
prediction <- predict(model, real_ratings[current_user, ], type = "ratings")
recommendation <- as(prediction, 'data.frame') %>%
arrange(-rating) %>% .[1:5,] %>%
mutate(book_id = as.numeric(as.character(item)))
# check is already read books is present
#recommendation <-recommendation[which(!(recommendation$book_id %in% alreayRead)),]
# get first five books from predictions
recommended_book_ids <- recommendation[,4]
return(recommended_book_ids)
}
user <- '32'
recommended_book_ids <- getRecommendation(user)
readBooks <- function() {
df_books <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_books.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_books)
}
#function that returns book Info
getBookInfo <- function(book_id){
df_books <- readBooks()
bookInfo <- df_books[which(df_books$book_id == book_id),c(2,3,7)]
return(bookInfo)
}
getRecommendation <- function(current_user){
#Import Library
library(recommenderlab)
library(tseries)
# convert current_user to character
#get sparse Rating matrix
ratingmat0 <- read.matrix(file = "processed_mat.csv",header = FALSE,sep = "",skip = 0)
print(is.data.frame(ratingmat0))
print(dim(ratingmat0))
sparse_ratings <- as(ratingmat0, "sparseMatrix")
rm(ratingmat0)
print(dim(sparse_ratings))
gc()
# already rated
#df_ratings <- readRatings()
#alreadyRead <- df_ratings[which(df_ratings$user_id == current_user),2]
real_ratings <- new("realRatingMatrix", data = sparse_ratings)
model <- Recommender(real_ratings, method = "UBCF", param = list(method = "pearson", nn = 4))
prediction <- predict(model, real_ratings[current_user, ], type = "ratings")
recommendation <- as(prediction, 'data.frame') %>%
arrange(-rating) %>% .[1:5,] %>%
mutate(book_id = as.numeric(as.character(item)))
# check is already read books is present
#recommendation <-recommendation[which(!(recommendation$book_id %in% alreayRead)),]
# get first five books from predictions
recommended_book_ids <- recommendation[,4]
return(recommended_book_ids)
}
user <- '32'
recommended_book_ids <- getRecommendation(user)
# Script for recommending Books
library(tidyr)
library(dplyr)
library(Matrix)
library(tseries)
# function to load libraries and read csv files
readBooks <- function() {
df_books <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_books.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_books)
}
readRatings  <- function(variables) {
df_ratings <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_ratings.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_ratings)
}
readUsers <- function() {
df_users <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_users.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_users)
}
getMatrix <- function() {
print("In sparse matrix")
# Import libraries
# Read CSV files into data frame
df_books <- readBooks()
df_ratings <- readRatings()
df_users <- readUsers()
# use as.character() after getting data frame of book info
# Create rating matrix
dimension_names <- list(user_id = sort(unique(df_ratings$user_id)), book_id = sort(unique(df_ratings$book_id)))
ratingmat <- spread(select(df_ratings, book_id, user_id, rating), book_id, rating) %>% select(-user_id)
ratingmat <- as.matrix(ratingmat)
dimnames(ratingmat) <- dimension_names
ratingmat[1:5, 1:5]
print(dim(ratingmat))
#create sparse of rating matrix for recommender lab
ratingmat0 <- ratingmat
ratingmat0[is.na(ratingmat0)] <- 0
return(ratingmat0)
}
rat_mat <- getMatrix()
write.big.matrix(x = rat_mat,filename = "processed_mat.csv",row.names = TRUE,col.names = TRUE,sep = ",")
# Script for recommending Books
library(tidyr)
library(dplyr)
library(Matrix)
library(tseries)
# function to load libraries and read csv files
readBooks <- function() {
df_books <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_books.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_books)
}
readRatings  <- function(variables) {
df_ratings <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_ratings.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_ratings)
}
readUsers <- function() {
df_users <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_users.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_users)
}
getMatrix <- function() {
print("In sparse matrix")
# Import libraries
# Read CSV files into data frame
df_books <- readBooks()
df_ratings <- readRatings()
df_users <- readUsers()
# use as.character() after getting data frame of book info
# Create rating matrix
dimension_names <- list(user_id = sort(unique(df_ratings$user_id)), book_id = sort(unique(df_ratings$book_id)))
ratingmat <- spread(select(df_ratings, book_id, user_id, rating), book_id, rating) %>% select(-user_id)
ratingmat <- as.matrix(ratingmat)
dimnames(ratingmat) <- dimension_names
ratingmat[1:5, 1:5]
print(dim(ratingmat))
#create sparse of rating matrix for recommender lab
ratingmat0 <- ratingmat
ratingmat0[is.na(ratingmat0)] <- 0
return(ratingmat0)
}
rat_mat <- getMatrix()
write.big.matrix(x = rat_mat,filename = "processed_mat.csv",row.names = TRUE,col.names = TRUE)
# Script for recommending Books
library(tidyr)
library(dplyr)
library(Matrix)
library(tseries)
# function to load libraries and read csv files
readBooks <- function() {
df_books <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_books.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_books)
}
readRatings  <- function(variables) {
df_ratings <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_ratings.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_ratings)
}
readUsers <- function() {
df_users <- read.csv(
file = "E:/Book Recommender Script R/Processed/processed_users.csv",
header = TRUE,
sep = ",",
quote = "\""
)
return(df_users)
}
getMatrix <- function() {
print("In sparse matrix")
# Import libraries
# Read CSV files into data frame
df_books <- readBooks()
df_ratings <- readRatings()
df_users <- readUsers()
# use as.character() after getting data frame of book info
# Create rating matrix
dimension_names <- list(user_id = sort(unique(df_ratings$user_id)), book_id = sort(unique(df_ratings$book_id)))
ratingmat <- spread(select(df_ratings, book_id, user_id, rating), book_id, rating) %>% select(-user_id)
ratingmat <- as.matrix(ratingmat)
dimnames(ratingmat) <- dimension_names
ratingmat[1:5, 1:5]
print(dim(ratingmat))
#create sparse of rating matrix for recommender lab
ratingmat0 <- ratingmat
ratingmat0[is.na(ratingmat0)] <- 0
return(ratingmat0)
}
rat_mat <- getMatrix()
big_mat  <- as.big.matrix(rat_mat)
write.big.matrix(x = big_mat,filename = "processed_mat.csv",row.names = TRUE,col.names = TRUE)
write.big.matrix(x = big_mat,filename = "processed_mat.csv",row.names = TRUE,col.names = TRUE)
